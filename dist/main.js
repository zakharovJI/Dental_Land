!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){(function(e){var n;n=function(){"use strict";var t=function(t){var e=t.id,n=t.viewBox,o=t.content;this.id=e,this.viewBox=n,this.content=o};function n(t,e){return t(e={exports:{}},e.exports),e.exports}t.prototype.stringify=function(){return this.content},t.prototype.toString=function(){return this.stringify()},t.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach(function(e){return delete t[e]})},"undefined"!=typeof window?window:void 0!==e||"undefined"!=typeof self&&self;var o=n(function(t,e){t.exports=function(){function t(t){var e=t&&"object"==typeof t;return e&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(e,n){var r,i=n&&!0===n.clone;return i&&t(e)?o((r=e,Array.isArray(r)?[]:{}),e,n):e}function n(n,r,i){var s=n.slice();return r.forEach(function(r,a){void 0===s[a]?s[a]=e(r,i):t(r)?s[a]=o(n[a],r,i):-1===n.indexOf(r)&&s.push(e(r,i))}),s}function o(r,i,s){var a=Array.isArray(i),l=s||{arrayMerge:n},c=l.arrayMerge||n;return a?Array.isArray(r)?c(r,i,s):e(i,s):function(n,r,i){var s={};return t(n)&&Object.keys(n).forEach(function(t){s[t]=e(n[t],i)}),Object.keys(r).forEach(function(a){t(r[a])&&n[a]?s[a]=o(n[a],r[a],i):s[a]=e(r[a],i)}),s}(r,i,s)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce(function(t,n){return o(t,n,e)})},o}()}),r=n(function(t,e){e.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},t.exports=e.default}),i=r.svg,s=r.xlink,a={};a[i.name]=i.uri,a[s.name]=s.uri;var l=function(t,e){return void 0===t&&(t=""),"<svg "+function(t){return Object.keys(t).map(function(e){return e+'="'+t[e].toString().replace(/"/g,"&quot;")+'"'}).join(" ")}(o(a,e||{}))+">"+t+"</svg>"};return function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},e.createFromExistingNode=function(t){return new e({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},e.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},e.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},e.prototype.render=function(){var t=this.stringify();return function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n}(l(t)).childNodes[0]},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(e.prototype,n),e}(t)},t.exports=n()}).call(this,n(2))},function(t,e,n){(function(e){var n;n=function(){"use strict";function t(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof window?window:void 0!==e||"undefined"!=typeof self&&self;var n=t(function(t,e){t.exports=function(){function t(t){var e=t&&"object"==typeof t;return e&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(e,n){var r,i=n&&!0===n.clone;return i&&t(e)?o((r=e,Array.isArray(r)?[]:{}),e,n):e}function n(n,r,i){var s=n.slice();return r.forEach(function(r,a){void 0===s[a]?s[a]=e(r,i):t(r)?s[a]=o(n[a],r,i):-1===n.indexOf(r)&&s.push(e(r,i))}),s}function o(r,i,s){var a=Array.isArray(i),l=s||{arrayMerge:n},c=l.arrayMerge||n;return a?Array.isArray(r)?c(r,i,s):e(i,s):function(n,r,i){var s={};return t(n)&&Object.keys(n).forEach(function(t){s[t]=e(n[t],i)}),Object.keys(r).forEach(function(a){t(r[a])&&n[a]?s[a]=o(n[a],r[a],i):s[a]=e(r[a],i)}),s}(r,i,s)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce(function(t,n){return o(t,n,e)})},o}()}),o=t(function(t,e){e.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},t.exports=e.default}),r=o.svg,i=o.xlink,s={};s[r.name]=r.uri,s[i.name]=i.uri;var a,l=function(t,e){return void 0===t&&(t=""),"<svg "+function(t){return Object.keys(t).map(function(e){return e+'="'+t[e].toString().replace(/"/g,"&quot;")+'"'}).join(" ")}(n(s,e||{}))+">"+t+"</svg>"},c=o.svg,u=o.xlink,d={attrs:(a={style:["position: absolute","width: 0","height: 0"].join("; ")},a[c.name]=c.uri,a[u.name]=u.uri,a)},f=function(t){this.config=n(d,t||{}),this.symbols=[]};f.prototype.add=function(t){var e=this.symbols,n=this.find(t.id);return n?(e[e.indexOf(n)]=t,!1):(e.push(t),!0)},f.prototype.remove=function(t){var e=this.symbols,n=this.find(t);return!!n&&(e.splice(e.indexOf(n),1),n.destroy(),!0)},f.prototype.find=function(t){return this.symbols.filter(function(e){return e.id===t})[0]||null},f.prototype.has=function(t){return null!==this.find(t)},f.prototype.stringify=function(){var t=this.config.attrs,e=this.symbols.map(function(t){return t.stringify()}).join("");return l(e,t)},f.prototype.toString=function(){return this.stringify()},f.prototype.destroy=function(){this.symbols.forEach(function(t){return t.destroy()})};var m=function(t){var e=t.id,n=t.viewBox,o=t.content;this.id=e,this.viewBox=n,this.content=o};m.prototype.stringify=function(){return this.content},m.prototype.toString=function(){return this.stringify()},m.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach(function(e){return delete t[e]})};var p=function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n},y=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},e.createFromExistingNode=function(t){return new e({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},e.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},e.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},e.prototype.render=function(){var t=this.stringify();return p(l(t)).childNodes[0]},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(e.prototype,n),e}(m),h={autoConfigure:!0,mountTo:"body",syncUrlsWithBaseTag:!1,listenLocationChangeEvent:!0,locationChangeEvent:"locationChange",locationChangeAngularEmitter:!1,usagesToUpdate:"use[*|href]",moveGradientsOutsideSymbol:!1},g=function(t){return Array.prototype.slice.call(t,0)},v=navigator.userAgent,w={isChrome:/chrome/i.test(v),isFirefox:/firefox/i.test(v),isIE:/msie/i.test(v)||/trident/i.test(v),isEdge:/edge/i.test(v)},b=function(t){var e=[];return g(t.querySelectorAll("style")).forEach(function(t){t.textContent+="",e.push(t)}),e},x=function(t){return(t||window.location.href).split("#")[0]},E=function(t){angular.module("ng").run(["$rootScope",function(e){e.$on("$locationChangeSuccess",function(e,n,o){var r,i,s;r=t,i={oldUrl:o,newUrl:n},(s=document.createEvent("CustomEvent")).initCustomEvent(r,!1,!1,i),window.dispatchEvent(s)})}])},_=function(t,e){return void 0===e&&(e="linearGradient, radialGradient, pattern"),g(t.querySelectorAll("symbol")).forEach(function(t){g(t.querySelectorAll(e)).forEach(function(e){t.parentNode.insertBefore(e,t)})}),t},C=o.xlink.uri,B="xlink:href",M=/[{}|\\\^\[\]`"<>]/g;function k(t){return t.replace(M,function(t){return"%"+t[0].charCodeAt(0).toString(16).toUpperCase()})}var N,O=["clipPath","colorProfile","src","cursor","fill","filter","marker","markerStart","markerMid","markerEnd","mask","stroke","style"],S=O.map(function(t){return"["+t+"]"}).join(","),A=function(t,e,n,o){var r=k(n),i=k(o);(function(t,e){return g(t).reduce(function(t,n){if(!n.attributes)return t;var o=g(n.attributes),r=e?o.filter(e):o;return t.concat(r)},[])})(t.querySelectorAll(S),function(t){var e=t.localName,n=t.value;return-1!==O.indexOf(e)&&-1!==n.indexOf("url("+r)}).forEach(function(t){return t.value=t.value.replace(r,i)}),function(t,e,n){g(t).forEach(function(t){var o=t.getAttribute(B);if(o&&0===o.indexOf(e)){var r=o.replace(e,n);t.setAttributeNS(C,B,r)}})}(e,r,i)},j={MOUNT:"mount",SYMBOL_MOUNT:"symbol_mount"},L=function(t){function e(e){var o=this;void 0===e&&(e={}),t.call(this,n(h,e));var r,i=(r=r||Object.create(null),{on:function(t,e){(r[t]||(r[t]=[])).push(e)},off:function(t,e){r[t]&&r[t].splice(r[t].indexOf(e)>>>0,1)},emit:function(t,e){(r[t]||[]).map(function(t){t(e)}),(r["*"]||[]).map(function(n){n(t,e)})}});this._emitter=i,this.node=null;var s=this.config;if(s.autoConfigure&&this._autoConfigure(e),s.syncUrlsWithBaseTag){var a=document.getElementsByTagName("base")[0].getAttribute("href");i.on(j.MOUNT,function(){return o.updateUrls("#",a)})}var l=this._handleLocationChange.bind(this);this._handleLocationChange=l,s.listenLocationChangeEvent&&window.addEventListener(s.locationChangeEvent,l),s.locationChangeAngularEmitter&&E(s.locationChangeEvent),i.on(j.MOUNT,function(t){s.moveGradientsOutsideSymbol&&_(t)}),i.on(j.SYMBOL_MOUNT,function(t){s.moveGradientsOutsideSymbol&&_(t.parentNode),(w.isIE||w.isEdge)&&b(t)})}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var o={isMounted:{}};return o.isMounted.get=function(){return!!this.node},e.prototype._autoConfigure=function(t){var e=this.config;void 0===t.syncUrlsWithBaseTag&&(e.syncUrlsWithBaseTag=void 0!==document.getElementsByTagName("base")[0]),void 0===t.locationChangeAngularEmitter&&(e.locationChangeAngularEmitter="angular"in window),void 0===t.moveGradientsOutsideSymbol&&(e.moveGradientsOutsideSymbol=w.isFirefox)},e.prototype._handleLocationChange=function(t){var e=t.detail,n=e.oldUrl,o=e.newUrl;this.updateUrls(n,o)},e.prototype.add=function(e){var n=t.prototype.add.call(this,e);return this.isMounted&&n&&(e.mount(this.node),this._emitter.emit(j.SYMBOL_MOUNT,e.node)),n},e.prototype.attach=function(t){var e=this,n=this;if(n.isMounted)return n.node;var o="string"==typeof t?document.querySelector(t):t;return n.node=o,this.symbols.forEach(function(t){t.mount(n.node),e._emitter.emit(j.SYMBOL_MOUNT,t.node)}),g(o.querySelectorAll("symbol")).forEach(function(t){var e=y.createFromExistingNode(t);e.node=t,n.add(e)}),this._emitter.emit(j.MOUNT,o),o},e.prototype.destroy=function(){var t=this.config,e=this.symbols,n=this._emitter;e.forEach(function(t){return t.destroy()}),n.off("*"),window.removeEventListener(t.locationChangeEvent,this._handleLocationChange),this.isMounted&&this.unmount()},e.prototype.mount=function(t,e){void 0===t&&(t=this.config.mountTo),void 0===e&&(e=!1);if(this.isMounted)return this.node;var n="string"==typeof t?document.querySelector(t):t,o=this.render();return this.node=o,e&&n.childNodes[0]?n.insertBefore(o,n.childNodes[0]):n.appendChild(o),this._emitter.emit(j.MOUNT,o),o},e.prototype.render=function(){return p(this.stringify())},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},e.prototype.updateUrls=function(t,e){if(!this.isMounted)return!1;var n=document.querySelectorAll(this.config.usagesToUpdate);return A(this.node,n,x(t)+"#",x(e)+"#"),!0},Object.defineProperties(e.prototype,o),e}(f),T=t(function(t){var e,n,o,r,i;t.exports=(n=[],o=document,r=o.documentElement.doScroll,(i=(r?/^loaded|^c/:/^loaded|^i|^c/).test(o.readyState))||o.addEventListener("DOMContentLoaded",e=function(){for(o.removeEventListener("DOMContentLoaded",e),i=1;e=n.shift();)e()}),function(t){i?setTimeout(t,0):n.push(t)})});!!window.__SVG_SPRITE__?N=window.__SVG_SPRITE__:(N=new L({attrs:{id:"__SVG_SPRITE_NODE__"}}),window.__SVG_SPRITE__=N);var U=function(){var t=document.getElementById("__SVG_SPRITE_NODE__");t?N.attach(t):N.mount(document.body,!0)};return document.body?U():T(U),N},t.exports=n()}).call(this,n(2))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){},function(t,e){document.addEventListener("DOMContentLoaded",()=>{let t=0,e=0,n=0,o=document.getElementsByClassName("dot"),r=document.getElementsByClassName("switcher__arrow-wrapper"),i=document.getElementsByClassName("slider-wrapper__item"),s=document.getElementsByClassName("images-wrapper__item"),a=document.getElementsByClassName("item__radio"),l=document.getElementsByClassName("footer-item__radio");for(let e=0;e<r.length;e++)r[e].onclick=(()=>{console.log("hkjhkjhs"),o[t].setAttribute("r","2"),o[t].style.stroke="#c4c4c4",o[t].style.fill="#c4c4c4",i[t].style.display="none",0===e?0!==t?(o[t-1].setAttribute("r","7"),o[t-1].style.stroke="#2d6b5f",o[t-1].style.fill="#2d6b5f",i[t-1].style.display="block",t-=1):(o[o.length-1].setAttribute("r","7"),o[o.length-1].style.stroke="#2d6b5f",o[o.length-1].style.fill="#2d6b5f",i[o.length-1].style.display="block",t=o.length-1):1===e&&(t!==o.length-1?(o[t+1].setAttribute("r","7"),o[t+1].style.stroke="#2d6b5f",o[t+1].style.fill="#2d6b5f",i[t+1].style.display="block",t+=1):(o[0].setAttribute("r","7"),o[0].style.stroke="#2d6b5f",o[0].style.fill="#2d6b5f",i[0].style.display="block",t=0))});for(let t=0;t<s.length;t++)s[t].onclick=(n=>{console.log(n.target),s[e].classList.toggle("item--big"),n.target.classList.toggle("item--big"),e=t});for(let t=0;t<a.length;t++)a[t].onchange=(()=>{l[n].checked="false",l[t].checked="true"}),l[t].onchange=(()=>{a[n].checked="false",a[t].checked="true"}),n=t;let c=document.getElementsByClassName("header__menu-toggler")[0],u=document.getElementsByClassName("header__menu-toggler--close")[0],d=document.getElementsByClassName("header")[0];console.log(c);let f=!0;c.onclick=(()=>{console.log("dsfdsf"),f&&(u.style.display="block",c.style.display="none",d.classList.toggle("header--menu-show"),document.getElementsByClassName("title-wrapper")[0].className="title-wrapper hidden",document.getElementsByClassName("menu-wrapper")[0].className.replace("menu-showed",""),document.getElementsByClassName("menu-wrapper")[0].className="menu-wrapper menu-showed"),f=!f}),u.onclick=(()=>{f||(u.style.display="none",c.style.display="block",d.classList.toggle("header--menu-show"),document.getElementsByClassName("title-wrapper")[0].className="title-wrapper showed",document.getElementsByClassName("menu-wrapper")[0].className="menu-wrapper menu-hidden"),f=!f});let m=document.getElementsByClassName("unsocial__button"),p=void 0;function y(t){console.log("Init is colled!"),p=new ymaps.Map("map-container",{center:t,zoom:15});var e=new ymaps.Placemark([45.028566,38.912117]);p.geoObjects.add(e),e=new ymaps.Placemark([45.008234,39.039174]),p.geoObjects.add(e)}document.getElementsByClassName("map-wrapper")[0].onclick=(t=>{document.getElementsByClassName("map-wrapper")[0].style.display="none"}),document.getElementsByClassName("map-container")[0].onclick=(t=>{t.stopPropagation()}),m[0].onclick=(()=>{void 0===p?(ymaps.ready(y([45.028566,38.912117])),document.getElementsByClassName("map-wrapper")[0].style.display="flex"):(p.setCenter([45.028566,38.912117]),document.getElementsByClassName("map-wrapper")[0].style.display="flex")}),m[1].onclick=(()=>{void 0===p?(ymaps.ready(y([45.008234,39.039174])),document.getElementsByClassName("map-wrapper")[0].style.display="flex"):(p.setCenter([45.008234,39.039174]),document.getElementsByClassName("map-wrapper")[0].style.display="flex")}),document.getElementsByClassName("feedback__done-btn")[0].onclick=(()=>{var t=new FormData;let e=document.getElementsByClassName("feedback__text-input");for(var n=0;n<e.length;n++)t.append(e[n].name,elements[n].value);var o=new XMLHttpRequest;o.onreadystatechange=function(){4==o.readyState&&200==o.status&&alert(o.responseText)},o.open("post","http://mrthefirst.bget.ru/form.php"),o.send(t)})})},function(t,e,n){"use strict";n.r(e);var o=n(0),r=n.n(o),i=n(1),s=n.n(i),a=new r.a({id:"alarm",use:"alarm-usage",viewBox:"0 0 32 32",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" fill="#7d7d7d" id="alarm"><path d="M26 18a10 10 0 0 0-9-9.95V6h1a1 1 0 0 0 0-2h-4a1 1 0 0 0 0 2h1v2.05a10 10 0 0 0-5.76 17.3l-2.95 2.94a1 1 0 0 0 1.42 1.42l3.15-3.15a9.89 9.89 0 0 0 10.28 0l3.15 3.15a1 1 0 0 0 1.42-1.42l-2.95-2.94A10 10 0 0 0 26 18zM8 18a8 8 0 1 1 8 8 8 8 0 0 1-8-8zm19.71-7.29a1 1 0 0 1-1.42 0l-3-3a1 1 0 0 1 1.42-1.42l3 3a1 1 0 0 1 0 1.42zm-19-3l-3 3a1 1 0 0 1-1.42-1.42l3-3a1 1 0 0 1 1.42 1.42zm10.12 13.12a1 1 0 0 1-1.42 0l-2.12-2.12A1.05 1.05 0 0 1 15 18v-3a1 1 0 0 1 2 0v2.59l1.83 1.82a1 1 0 0 1 0 1.42z" /></symbol>'}),l=(s.a.add(a),new r.a({id:"arrow--short",use:"arrow--short-usage",viewBox:"0 0 16 40",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 40" id="arrow--short"><path d="M8 1v38" /><path fill="none" d="M1 8l7-7 7 7" /></symbol>'})),c=(s.a.add(l),new r.a({id:"arrow",use:"arrow-usage",viewBox:"0 0 80 16",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 16" stroke="#fff" id="arrow"><path stroke-width="2" d="M2 8h76" /><path stroke-width="2" fill="none" d="M72 1l6 7-6 7" /></symbol>'})),u=(s.a.add(c),new r.a({id:"dots",use:"dots-usage",viewBox:"0 0 16 145",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 145" id="dots"><circle class="dot" stroke="#2d6b5f" fill="#2d6b5f" cx="8" cy="10" r="7" /><circle class="dot" cx="8" cy="50" r="2" /><circle class="dot" cx="8" cy="95" r="2" /><circle class="dot" cx="8" cy="135" r="2" /></symbol>'})),d=(s.a.add(u),new r.a({id:"location",use:"location-usage",viewBox:"0 0 100 100",content:'<symbol class="contact-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="#2d2d2d" id="location"><path d="M69.283 32.454C67.31 23.294 59.2 16.645 50 16.645c-9.199 0-17.31 6.649-19.284 15.81-.728 3.377-.767 7.125-.119 11.457 1.325 8.88 5.126 17.317 10.767 24.269-5.274 1.419-8.489 4.046-8.489 7.05 0 4.556 7.522 8.125 17.125 8.125s17.125-3.569 17.125-8.125c0-2.988-3.22-5.632-8.487-7.052 5.64-6.952 9.44-15.388 10.765-24.266.648-4.335.609-8.082-.12-11.459zM65.125 75.23c0 2.897-6.212 6.125-15.125 6.125s-15.125-3.228-15.125-6.125c0-2.139 3.166-4.255 7.93-5.349a49.31 49.31 0 0 0 6.512 6.137l.271.212h.824l.271-.212a49.325 49.325 0 0 0 6.513-6.138c4.75 1.092 7.929 3.227 7.929 5.35zm2.3-31.614C65.657 55.46 59.321 66.496 50 74.007c-9.321-7.511-15.657-18.547-17.425-30.391-.611-4.09-.58-7.603.096-10.74C34.448 24.63 41.736 18.645 50 18.645s15.552 5.985 17.328 14.231c.677 3.136.708 6.65.097 10.74z" /><path d="M49.955 27.451c-5.079 0-9.212 4.133-9.212 9.212s4.133 9.212 9.212 9.212 9.212-4.133 9.212-9.212-4.133-9.212-9.212-9.212zm0 16.425c-3.977 0-7.212-3.235-7.212-7.212s3.235-7.212 7.212-7.212 7.212 3.235 7.212 7.212-3.235 7.212-7.212 7.212z" /></symbol>'})),f=(s.a.add(d),new r.a({id:"mail",use:"mail-usage",viewBox:"0 0 100 100",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="#2d2d2d" id="mail"><path class="contact-icon" d="M17 21c-4.439 0-8 3.733-8 8.219V70.75C9 75.235 12.561 79 17 79h66c4.439 0 8-3.765 8-8.25V29.219C91 24.733 87.439 21 83 21H17zm0 4h66c.592 0 1.15.17 1.656.406L52.47 55.97c-1.478 1.402-3.395 1.403-4.875 0l-32.25-30.563C15.849 25.17 16.408 25 17 25zm-3.938 3.75l22.782 21.594-22.407 22.375A4.521 4.521 0 0 1 13 70.75V29.219c0-.163.047-.313.062-.469zm73.876 0c.016.156.062.306.062.469V70.75c0 .709-.165 1.36-.438 1.938L64.218 50.313 86.937 28.75zM61.312 53.094L83.188 75H16.844L38.75 53.125l6.094 5.75c2.902 2.751 7.473 2.755 10.375 0l6.093-5.781z" fill="#000" overflow="visible" /></symbol>'})),m=(s.a.add(f),new r.a({id:"menu-toggler",use:"menu-toggler-usage",viewBox:"0 0 20 20",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke="#000" id="menu-toggler"><path stroke-width="3" d="M1 1h18M1 10h18M1 19h18" /></symbol>'})),p=(s.a.add(m),new r.a({id:"menu-toggler--close",use:"menu-toggler--close-usage",viewBox:"0 0 20 20",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke="#000" id="menu-toggler--close"><path stroke-width="3" d="M1 1l18 18M1 19L19 1" /></symbol>'})),y=(s.a.add(p),new r.a({id:"phone",use:"phone-usage",viewBox:"0 0 333 333",content:'<symbol class="contact-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 333 333" fill="#7b7b7b" id="phone"><path class="fil0" d="M143 80c13 12 13 33 0 46l-13 13c18 22 42 46 64 64l14-13c12-13 33-13 46 0l21 21c11 12 12 30 2 43-5 8-14 14-20 21-20 20-60 5-99-24-29-22-54-46-75-75-30-40-45-79-25-99 7-7 14-15 22-21 12-10 31-9 42 3l21 21zm-31 58l22-22c7-7 7-19 0-27l-21-21c-7-7-18-7-26-1-6 5-13 13-19 19-14 14 0 47 25 82 21 27 45 51 73 72 34 26 67 40 81 26 6-6 14-13 20-20 6-8 5-19-2-26l-21-21c-7-7-20-7-27 0l-22 22c-29-23-60-53-83-83z" /></symbol>'}));s.a.add(y),n(3),n(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,